% Generated by roxygen2 (4.0.2): do not edit by hand
\name{fix_replen}
\alias{fix_replen}
\title{Find and fix inconsistent repeat lengths}
\usage{
fix_replen(gid, replen, e = 1e-05)
}
\arguments{
\item{gid}{a genind object}

\item{replen}{a numeric vector of repeat motif lengths.}

\item{e}{a number to be added to inconsistent repeat lengths to allow for
proper rounding.}
}
\value{
a numeric vector of corrected reapeat motif lengths.
}
\description{
Attempts to fix inconsistent repeat lengths found by \code{test_replen}
}
\details{
Before being fed into the algorithm to calculate Bruvo's distance,
  the amplicon length is divided by the repeat unit length. Because of the
  amplified primer sequence attached to sequence repeat, this division does
  not always result in an integer and so the resulting numbers are rounded.
  The rounding also protects against slight mis-calls of alleles. Because we
  know that \deqn{\frac{(A + e) - (B + e)}{r}}{((A + e) - (B + e))/r} is
  equivalent to \deqn{\frac{A - B}{r}}{(A - B)/r}, we know that the primer
  sequence will not alter the relationships between the alleles.
  Unfortunately for nucleotide repeats that have powers of 2, rounding in R
  is based off of the IEC 60559 standard (see \code{\link{round}}), that
  means that any number ending in 5 is rounded to the nearest \emph{even}
  digit. This function will attempt to alleviate this problem by adding a
  very small amount to the repeat length so that division will not result in
  a 0.5. If this fails, the same amount will be subtracted. If neither of
  these work, a warning will be issued and it is up to the user to determine
  if the fault is in the allele calls or the repeat lengths.
}
\examples{
library(poppr)
data(nancycats)
fix_replen(nancycats, rep(2, 9))
# Let's start with an example of a tetranucleotide repeat motif and imagine
# that there are twenty alleles all 1 step apart:
(x <- 1:20L * 4L)
# These are the true lengths of the different alleles. Now, let's add the
# primer sequence to them.
(PxP <- x + 21 + 21)
# Now we make sure that x / 4 is equal to 1:20, which we know each have
# 1 difference.
x/4
# Now, we divide the sequenc with the primers by 4 and see what happens.
(PxPc <- PxP/4)
(PxPcr <- round(PxPc))
diff(PxPcr) # we expect all 1s

# Let's try that again by adding a tiny amount to 4
(PxPc <- PxP/4.00001)
(PxPcr <- round(PxPc))
diff(PxPcr)
}

